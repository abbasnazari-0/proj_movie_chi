import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:get/get.dart';
import 'package:iconsax/iconsax.dart';
import 'package:loading_animation_widget/loading_animation_widget.dart';
import 'package:movie_chi/core/models/search_video_model.dart';
import 'package:movie_chi/core/utils/constants.dart';
import 'package:movie_chi/core/utils/get_storage_data.dart';
import 'package:movie_chi/features/feature_search/presentation/widgets/search_screen_item.dart';
import 'package:pull_to_refresh_flutter3/pull_to_refresh_flutter3.dart';

import '../../../../../../core/widgets/mytext.dart';
import '../../../../../feature_play_list/presentation/pages/feature_play_list.dart';
import '../../../../data/model/home_catagory_model.dart';
import '../../../controller/home_views_controller/grid_home_controller.dart';

class GridHomeView extends StatefulWidget {
  const GridHomeView({
    super.key,
    required this.homeCatagoryItem,
    required this.type,
  });

  final HomeCatagoryItemModel homeCatagoryItem;
  final VideoTypeType? type;

  @override
  State<GridHomeView> createState() => _GridHomeViewState();
}

class _GridHomeViewState extends State<GridHomeView> {
  RefreshController refreshController =
      RefreshController(initialRefresh: false);
  @override
  Widget build(BuildContext context) {
    final gridHomeViewController = GridHomeViewController();
    return Container(
      color: Constants.hexToColor(widget.homeCatagoryItem.viewColor!)
          .withAlpha(int.parse(widget.homeCatagoryItem.colorAlpha ?? "255")),
      width: double.tryParse(widget.homeCatagoryItem.viewWidth!)!,
      height: double.tryParse(widget.homeCatagoryItem.viewHeight!)!,
      child: Column(
        children: [
          InkWell(
            onTap: () {
              if (((GetStorageData.getData("logined") ?? false))) {
                Get.toNamed(PlayListScreen.routeName, arguments: {
                  "homeCatagoryItemID": widget.homeCatagoryItem.id.toString(),
                  "type": "more_autogenerated",
                  "title": widget.homeCatagoryItem.title!,
                  "videoType": widget.type
                });
              }
            },
            child: Padding(
              padding: const EdgeInsets.only(
                  right: 20, top: 10, left: 10, bottom: 10),
              child: Row(
                children: [
                  MyText(
                    txt: widget.homeCatagoryItem.title!,
                    color: Theme.of(context).primaryTextTheme.bodyMedium!.color,
                    fontWeight: FontWeight.bold,
                    size: 16,
                    overflow: TextOverflow.ellipsis,
                  ),
                  const Spacer(),
                  const MyText(
                      txt: "بیشتر",
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      size: 13),
                  const Icon(Iconsax.arrow_left_2),
                ],
              ),
            ),
          ),
          const Gap(5),
          Expanded(
            child: SmartRefresher(
              controller: refreshController,
              scrollDirection: Axis.horizontal,
              enablePullUp: true,
              enablePullDown: false,
              footer: const GridLoadingEnded(),
              onLoading: () async {
                await refreshController.requestLoading();
                await gridHomeViewController
                    .onloadingMore(widget.homeCatagoryItem);
                refreshController.loadComplete();

                setState(() {});
                // gridHomeViewController.onloadingMore();
              },
              child: ListView.builder(
                  scrollDirection: Axis.horizontal,
                  itemCount: widget.homeCatagoryItem.data?.length,
                  // optimization
                  cacheExtent: 10,
                  itemBuilder: (context, index) {
                    HomeItemData itemData =
                        widget.homeCatagoryItem.data![index];

                    // convert homeItemData to SearchVideo
                    SearchVideo video = SearchVideo.fromJson(itemData.toJson());

                    return SizedBox(
                        width: double.tryParse(
                                widget.homeCatagoryItem.viewWidth!)! +
                            0,
                        // height: 100,
                        child: SearchItem(item: video, chainrouter: true));
                  }),
            ),
          ),
          const Gap(8),
        ],
      ),
    );
  }
}

class GridLoadingEnded extends StatelessWidget {
  const GridLoadingEnded({
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    return CustomFooter(
      builder: (BuildContext context, LoadStatus? mode) {
        Widget body;
        if (mode == LoadStatus.idle) {
          body = const Text("بیشتر");
        } else if (mode == LoadStatus.loading) {
          body = LoadingAnimationWidget.flickr(
            leftDotColor: Theme.of(context).colorScheme.secondary,
            rightDotColor:
                Theme.of(context).colorScheme.background.withAlpha(100),
            size: 20,
          );
        } else if (mode == LoadStatus.failed) {
          body = const Text("خطا در بارگذاری");
        } else if (mode == LoadStatus.canLoading) {
          body = const Text("بیشتر");
        } else {
          body = const Text("بیشتر");
        }
        return SizedBox(
          height: 55.0,
          child: Center(child: body),
        );
      },
    );
  }
}
